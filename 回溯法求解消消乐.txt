import java.util.Random;

public class Main{
    int[] mcounts1=new int[7];
    int[] times1=new int[7];
    //交换两个元素
    public void swap(int x1,int y1,int x2,int y2,int[][] array)
    {
        int tempt=array[x1][y1];
        array[x1][y1]=array[x2][y2];
        array[x2][y2]=tempt;
    }
    //创建二维数组并且复制元素
    public int[][] getarray(int[][] array)
    {
        int[][] arr=new int[array.length][array[0].length];
        for(int i=0;i<array.length;i++)
        {
            for(int j=0;j<array[0].length;j++)
                arr[i][j]=array[i][j];
        }
        return arr;
    }
    //在横轴方向上从左到右寻找相同元素最长长度
    public int row(int x,int y,int[][] array)
    {
        int length=1;
        while(true)
        {
            if(y<array[0].length-1)
            {
                if(array[x][y]==array[x][y+1])
                {
                    length++;
                    y++;
                }
                else
                    break;
            }
            else
                break;
        }
        return length;
    }
    //根据长度求出得分
    public int points(int length)
    {
        if(length<3)
            return 0;
        else
        {
            if(length==3)
                return 1;
            else if(length==4)
                return 4;
            else
                return length+length;
        }
    }
    //在纵轴方向上求出相同元素最长长度
    public int col(int x,int y,int[][] array)
    {
        int length=1;
        while(true)
        {
            if(x>0)
            {
                if(array[x][y]==array[x-1][y])
                {
                    length++;
                    x--;
                }
                else
                    break;
            }
            else
                break;
        }
        return length;
    }
    //消除操作
    public void change(int[][] array,int[][] marked)
    {
        //从上到下从左到右遍历
        for(int j=0;j<array[0].length;j++)
        {
            int i=0;
            while(i<array.length)
            {
                if(array[i][j]==0)
                {
                    i++;
                }
                else
                {
                    if(marked[i][j]==0)
                        i++;
                    else
                    {
                        //上面的元素下落
                        dropdown(i,j,array,marked[i][j]);
                        i=i+marked[i][j];
                    }
                }
            }
            //将所有marked标记为0，重新更新
            for(int k=0;k<array.length;k++)
                marked[k][j]=0;
        }
    }
    public void dropdown(int i,int j,int[][] array,int length)
    {
        for(int k=i-1;k>=0;k--)
            array[k+length][j]=array[k][j];
        for(int k=length-1;k>=0;k--)
            array[k][j]=0;
    }
    //找出所有可以消去的行和列
    public int computed(int[][] array,int[][] marked)
    {
        //总共得分
        int num=0;
        //从左下角开始
        for(int j=0;j<array[0].length;j++)
        {
            for(int i=array.length-1;i>=0;i--)
            {
                if(array[i][j]==0)
                    break;
                //在该位置所在横轴方向上的消去长度
                int length1=0;
                //在该位置所在纵轴方向上的消去长度
                int length2=0;
                if(j>0)
                {
                   if(array[i][j]!=array[i][j-1])
                   {
                       length1=row(i,j,array);
                       num+=points(length1);
                   }
                }
                else
                {
                    length1=row(i,j,array);
                    num+=points(length1);
                }
                if(i<array.length-1)
                {
                    if(array[i][j]!=array[i+1][j])
                    {
                        length2=col(i,j,array);
                        num+=points(length2);
                    }
                }
                else
                {
                    length2=col(i,j,array);
                    num+=points(length2);
                }
                int k=j;
                //将要消去的元素标记为1
                if(length1>=3)
                {
                    //这里要注意如果已在纵轴方向上被标记则不能在横轴方向上更新
                    if(marked[i][j]==0)
                        marked[i][j]=1;
                    while(length1>1)
                    {
                        marked[i][j+1]=1;
                        length1--;
                        j++;
                    }
                }
                j=k;
                if(length2>=3)
                {
                    //只标记一个元素，那么这个位置正下方的length2个元素都会被消去
                    marked[i-length2+1][j]=length2;
                }
            }
        }
        //没有要消去的元素直接结束
        if(num==0)
            return 0;
        //消去元素重新调整
        change(array,marked);
        return num+computed(array,marked);
    }
    public int changeright(int i,int j,int[][] array,int[][] marked)
    {
        if(j<array[0].length-1)
        {
            if(array[i][j+1]==0)
                return 0;
            swap(i,j,i,j+1,array);
            return computed(array,marked);
        }
        else
            return 0;
    }
    public int changeup(int i,int j,int[][] array,int[][] marked)
    {
        if(i>0)
        {
            if(array[i-1][j]==0)
                return 0;
            swap(i,j,i-1,j,array);
            return computed(array,marked);
        }
        else
            return 0;
    }
    //继续交换
    public void everychange(int[][] array,int[][] marked,int[] counts,int count,int num,boolean flag,boolean flag2)
    {
        for(int j=0;j<array[0].length;j++)
        {
            for(int i=array.length-1;i>=0;i--)
            {
                if(array[i][j]==0)
                    break;
                if(j<array[0].length-1)
                {
                    if(array[i][j+1]!=0)
                    {
                        int[][] arr1=getarray(array);
                        everychangeright(arr1,marked,counts,i,j,count,num,flag,flag2);
                    }
                }
                if(i>0)
                {
                    if(array[i-1][j]!=0)
                    {
                        int[][] arr2=getarray(array);
                        everychangeup(arr2,marked,counts,i,j,count,num,flag,flag2);
                    }
                }
            }
        }
    }
    public void everychangeright(int[][] array,int[][] marked,int[] counts,int i,int j,int count,int num,boolean flag,boolean flag2)
    {
        //获取交换后的得分
        int point=changeright(i,j,array,marked);
        if(point==0)
            return ;
        //贪心算法
        if(flag==true)
        {
            if(point+num<=counts[count])
                return ;
            int sum=point+num;
            if(sum>counts[count])
            counts[count]=sum;
            if(count<6)
                everychange(array,marked,counts,count+1,sum,flag,flag2);
        }
        //平均法
        if(flag2==true)
        {
            if(num+point<mcounts1[count])
                    return ;
            int sum=point+num;
            if(sum>counts[count])
            counts[count]=sum;
            if(count<6)
                everychange(array,marked,counts,count+1,sum,flag,flag2);
        }
        if(flag==false&&flag2==false)
        {
                mcounts1[count]+=(num+point);
                times1[count]++;
                //第count次交换后的总分
                int sum=point+num;
                if(sum>counts[count])
                    counts[count]=sum;
                if(count<6)
                    everychange(array,marked,counts,count+1,sum,flag,flag2);

        }
    }
    public void everychangeup(int[][] array,int[][] marked,int[] counts,int i,int j,int count,int num,boolean flag,boolean flag2)
    {
        //获取交换后的得分
        int point=changeup(i,j,array,marked);
        if(point==0)
            return ;
        //贪心算法
        if(flag==true)
        {
            if(point+num<=counts[count])
                return ;
            int sum=point+num;
            if(sum>counts[count])
            counts[count]=sum;
            if(count<6)
                everychange(array,marked,counts,count+1,sum,flag,flag2);
        }
        //平均法
        if(flag2==true)
        {
            if(num+point<mcounts1[count])
                return ;
            int sum=point+num;
            if(sum>counts[count])
            counts[count]=sum;
            if(count<6)
                everychange(array,marked,counts,count+1,sum,flag,flag2);
        }
        if(flag==false&&flag2==false)
        {
                mcounts1[count]+=(num+point);
                times1[count]++;
                //如果分数大于0那么说明有消去操作，继续交换否则结束
                //第count次交换后的总分
                int sum=point+num;
                if(sum>counts[count])
                    counts[count]=sum;
                if(count<6)
                    everychange(array,marked,counts,count+1,sum,flag,flag2);

        }

    }
    public void beginchange(int[][] array,int[][] marked,int[] counts,boolean flag,boolean flag2)
    {
        long begintime=System.currentTimeMillis();
        for (int j = 0; j < array[0].length; j++) {
            for (int i = array.length - 1; i >= 0; i--) {
                if (array[i][j] == 0)
                    break;
                if (j < array[0].length - 1) {
                    if (array[i][j + 1] != 0) {
                        //从第一次向右交换开始
                        int[][] arr1 = getarray(array);
                        everychangeright(arr1, marked, counts, i, j, 0, 0,flag,flag2);
                    }
                }
                if (i > 0) {
                    if (array[i - 1][j] != 0) {
                        //从第一次向上交换开始
                        int[][] arr2 = getarray(array);
                        everychangeup(arr2, marked, counts, i, j, 0, 0,flag,flag2);
                    }
                }
            }
        }
        long endtime=System.currentTimeMillis();
        show(counts,array.length,array[0].length,endtime-begintime,flag,flag2);
    }
    public void show(int[] counts,int m,int n,long time,boolean flag,boolean flag2)
    {
            if(flag==false&&flag2==false) {
                System.out.println("无剪枝情况下蛮力回溯法"+m+"*"+n+"的图运行时间为"+time+"ms");
            }
            if(flag==true) {
                System.out.println("有剪枝情况下贪心算法在"+m+"*"+n+"的图运行时间为"+time+"ms");
            }
            if(flag2==true)
                System.out.println("有剪枝情况下平均法在"+m+"*"+n+"的图运行时间为"+time+"ms");
            for(int i=0;i<7;i++) {
                if(i==6)
                    System.out.println(counts[i]);
                else
                    System.out.print(counts[i]+" ");
            }
        System.out.println();
    }
    public static void main(String[] args) {
        Main a = new Main();
        //第一问
        int[][] array = {
                {3, 3, 4, 3},
                {3, 2, 3, 3},
                {2, 4, 3, 4},
                {1, 3, 4, 3},
                {3, 3, 1, 1},
                {3, 4, 3, 3},
                {1, 4, 4, 3},
                {1, 2, 3, 2}
        };
        /*
        marked数组标记每个数组元素，在分析图中的消去情况时，如果一个
        元素在横向上要进行消去就标记为1，如果在纵向要进行消去时要找到
        起始消去位置标记为要消去的长度
         */
        int[][] marked = new int[array.length][array[0].length];
        //只经过一次交换的最大得分
        int max = 0;
        //交换的两个位置，初始化为(0,0) (0,1)
        int x1 = 0, y1 = 0, x2 = 0, y2 = 1;
        //预消去，未交换之前可能存在可以消去的块
        int prevalue = a.computed(array, marked);
        //向右和向上交换元素，从左下角开始
        for (int j = 0; j < array[0].length; j++) {
            for (int i = array.length - 1; i >= 0; i--) {
                //如果当前位置没有元素就跳过
                if (array[i][j] == 0)
                    continue;
                int point1 = 0;
                int point2 = 0;
                //如果不是最右边一列的元素并且右边的元素不是0那么与右边元素交换
                if (j < array[0].length - 1) {
                    if (array[i][j + 1] != 0) {
                        int[][] arr1 = a.getarray(array);
                        point1 = a.changeright(i, j, arr1, marked);
                    }
                }
                //如果不是最上边一列的元素并且上边的元素不是0那么与上边元素交换
                if (i > 0) {
                    if (array[i - 1][j] != 0) {
                        int[][] arr2 = a.getarray(array);
                        point2 = a.changeup(i, j, arr2, marked);
                    }
                }
                int point = point1 > point2 ? point1 : point2;
                if (point > max) {
                    if (point1 > point2) {
                        x1 = x2 = i;
                        y1 = j;
                        y2 = j + 1;
                    } else {
                        x1 = i;
                        y1 = y2 = j;
                        x2 = i - 1;
                    }
                    max = point;
                }
            }
        }
        System.out.println("预消去得分为" + prevalue);
        System.out.println("交换一次的最大得分为" + max);
        System.out.println("交换的位置为(" + x1 + "," + y1 + ")和(" + x2 + "," + y2 + ")");
        System.out.println("--------------------------");
        //第二问
        Random random = new Random();
        int[] counts1=new int[7];
        a.beginchange(array,marked,counts1,false,false);
        //按照列
        for(int i=5;i<11;i++) {
            int[][] array2=new int[8][i];
            int[][] marked2=new int[8][i];
            for(int k=0;k<7;k++)
            {
                a.mcounts1[k]=0;
                a.times1[k]=0;
            }
            for(int r=0;r<8;r++)
                for(int j=0;j<i;j++)
                    array2[r][j]=random.nextInt(6)%4+1;
            //蛮力法
            int[] counts2=new int[7];
            a.beginchange(array2,marked2,counts2,false,false);
            //贪心法
            int[] counts22=new int[7];
            a.beginchange(array2, marked2, counts22, true, false);
            //平均法
            for (int k = 0; k < 7; k++) {
                if(a.times1[k]!=0)
                a.mcounts1[k] = a.mcounts1[k] / a.times1[k];
            }
            int[] counts222=new int[7];
            a.beginchange(array2, marked2, counts222, false, true);
        }
        //按照行
        for(int i=5;i<11;i++) {
            int[][] array2=new int[i][8];
            int[][] marked2=new int[i][8];
            for(int k=0;k<7;k++)
            {
                a.mcounts1[k]=0;
                a.times1[k]=0;
            }
            for(int r=0;r<i;r++)
                for(int j=0;j<8;j++)
                    array2[r][j]=random.nextInt(6)%4+1;
            //蛮力法
            int[] counts2=new int[7];
            a.beginchange(array2,marked2,counts2,false,false);
            //贪心法
            int[] counts22=new int[7];
            a.beginchange(array2, marked2, counts22, true, false);
            //平均法
            for (int k = 0; k < 7; k++) {
                if(a.times1[k]!=0)
                    a.mcounts1[k] = a.mcounts1[k] / a.times1[k];
            }
            int[] counts222=new int[7];
            a.beginchange(array2, marked2, counts222, false, true);
        }
        //按照k
        for(int i=5;i<11;i++) {
            int[][] array2=new int[8][8];
            int[][] marked2=new int[8][8];
            for(int k=0;k<7;k++)
            {
                a.mcounts1[k]=0;
                a.times1[k]=0;
            }
            for(int r=0;r<8;r++)
                for(int j=0;j<8;j++)
                    array2[r][j]=random.nextInt(i+2)%i+1;
            //蛮力法
            int[] counts2=new int[7];
            a.beginchange(array2,marked2,counts2,false,false);
            //贪心法
            int[] counts22=new int[7];
            a.beginchange(array2, marked2, counts22, true, false);
            //平均法
            for (int k = 0; k < 7; k++) {
                if(a.times1[k]!=0)
                    a.mcounts1[k] = a.mcounts1[k] / a.times1[k];
            }
            int[] counts222=new int[7];
            a.beginchange(array2, marked2, counts222, false, true);
        }
        //蛮力法最大问题规模 12*12 k=8
        int[][] maxarray=new int[12][12];
        int[][] maxmarked=new int[12][12];
        int[] maxcounts1=new int[7];
        for(int k=0;k<7;k++)
        {
            a.mcounts1[k]=0;
            a.times1[k]=0;
        }
        for(int i=0;i<12;i++)
            for(int j=0;j<12;j++)
                maxarray[i][j]=random.nextInt(10)%8+1;
        a.beginchange(maxarray,maxmarked,maxcounts1,false,false);
        //贪心法最大问题规模 100*100 k=8
        int[][] maxarray2=new int[100][100];
        int[][] maxmarked2=new int[100][100];
        int[] maxcounts2=new int[7];
        for(int i=0;i<100;i++)
            for(int j=0;j<100;j++)
                maxarray2[i][j]=random.nextInt(10)%8+1;
        a.beginchange(maxarray2,maxmarked2,maxcounts2,true,false);
        //平均法最大问题规模 12*12 k=8
        int[][] maxarray3=new int[12][12];
        int[][] maxmarked3=new int[12][12];
        int[] maxcounts3=new int[7];
        for (int k = 0; k < 7; k++) {
            if(a.times1[k]!=0)
                a.mcounts1[k] = a.mcounts1[k] / a.times1[k];
        }
        for(int i=0;i<12;i++)
            for(int j=0;j<12;j++)
                maxarray[i][j]=random.nextInt(10)%8+1;
        a.beginchange(maxarray3,maxmarked3,maxcounts3,false,true);



    }
    }


