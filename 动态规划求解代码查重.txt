import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;

public class Main
{
    public double getLCSlength(ArrayList<String> list1,ArrayList<String> list2,int x,int y,boolean flag)
    {
        String s1=list1.get(x);
        String s2=list2.get(y);
        if(flag)
        {
            String[] array=isSamedefine(s1,s2);
            if(array!=null)
            {
                s1=array[0];
                s2=array[1];
            }
        }
        int[][] c=new int[s1.length()+1][s2.length()+1];
        int[][] b=new int[s1.length()+1][s2.length()+1];
        int length=s1.length()<s2.length()?s1.length():s2.length();
        StringBuilder ss=new StringBuilder("");//ss为最长LCS字符串
        for(int i=0;i<s1.length();i++)
        {
            for(int j=0;j<s2.length();j++)
            {
                if(s1.charAt(i)==s2.charAt(j))
                {
                    c[i+1][j+1]=c[i][j]+1;
                    b[i+1][j+1]=1;
                }
                else if(c[i][j+1]>=c[i+1][j])
                {
                    c[i+1][j+1]=c[i][j+1];
                    b[i+1][j+1]=2;
                }
                else
                {
                    c[i+1][j+1]=c[i+1][j];
                    b[i+1][j+1]=3;
                }
            }
        }
        int i=s1.length();
        int j=s2.length();
        while(i>0&&j>0)
        {
            if(b[i][j]==1)
            {
                ss.append(s1.charAt(i-1));
                i--;
                j--;
            }
            else if(b[i][j]==2)
                i--;
            else
                j--;
        }
        if(!flag)
        {
            System.out.println("A.cpp文件的第"+(x+1)+"行与B.cpp文件的第"+(y+1)+"行的LCS为"+ss.reverse().toString());
            System.out.println("LCS的长度为"+c[s1.length()][s2.length()]);
        }
        return 1.0*c[s1.length()][s2.length()]/length;
    }
    public String[] isSamedefine(String s1,String s2)
    {
        if(s1.matches("(.*)int\\*(.*)|(.*)int \\*(.*)|(.*)int(.*)")&&
        s2.matches("(.*)int\\*(.*)|(.*)int \\*(.*)|(.*)int(.*)"))
        {
            String[] array1=s1.split("(int\\*)|(=)|(int \\*)");
            String[] array2=s2.split("(int\\*)|(=)|(int \\*)");
            StringBuilder ss1=new StringBuilder(array1[0]+"int*");
            StringBuilder ss2=new StringBuilder(array2[0]+"int*");
            for(int i=2;i<array1.length;i++)
                ss1.append(array1[i]);
            for(int i=2;i<array2.length;i++)
                ss2.append(array2[i]);
            String[] array={ss1.toString(),ss2.toString()};
            return array;
        }
        else if(s1.matches("(.*)double\\*(.*)|(.*)double \\*(.*)|(.*)double(.*)")&&
            s2.matches("(.*)double\\*(.*)|(.*)double \\*(.*)|(.*)double(.*)"))
    {
        String[] array1=s1.split("(double\\*)|(=)|(double \\*)");
        String[] array2=s2.split("(double\\*)|(=)|(double \\*)");
        StringBuilder ss1=new StringBuilder(array1[0]+"double*");
        StringBuilder ss2=new StringBuilder(array2[0]+"double*");
        for(int i=2;i<array1.length;i++)
            ss1.append(array1[i]);
        for(int i=2;i<array2.length;i++)
            ss2.append(array2[i]);
        String[] array={ss1.toString(),ss2.toString()};
        return array;
    }
    else if(s1.matches("(.*)int(.*)|(.*)int\\*\\*(.*)")&&
            s2.matches("(.*)int(.*)|(.*)int\\*\\*(.*)"))
    {
        String[] array1=s1.split("(int\\*\\*)|(=)|(int)");
        String[] array2=s2.split("(int\\*\\*)|(=)|(int)");
        StringBuilder ss1=new StringBuilder(array1[0]+"int");
        StringBuilder ss2=new StringBuilder(array2[0]+"int");
        for(int i=2;i<array1.length;i++)
            ss1.append(array1[i]);
        for(int i=2;i<array2.length;i++)
            ss2.append(array2[i]);
        String[] array={ss1.toString(),ss2.toString()};
        return array;
    }
    else
        return null;
    }
    public void prinf(double[][] S,int[][] D,int m,int n,boolean flag)
    {
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
                System.out.print(String.format("%.2f",S[i][j])+" ");
            System.out.println();
        }
        System.out.println("--------------");
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
                System.out.print(D[i][j]+" ");
            System.out.println();
        }
        int[][] f=new int[m+1][n+1];
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(D[i-1][j-1]==1)
                    f[i][j]=f[i-1][j-1]+1;
                else if(f[i][j-1]>=f[i-1][j])
                    f[i][j]=f[i][j-1];
                else
                    f[i][j]=f[i-1][j];
            }
        }
        if(!flag)
            System.out.println("B.cpp文件最多重复行数为"+f[m][n]);
        else
            System.out.println("使用正则表达式替换变量后"+f[m][n]);
    }
    public static void main(String[] args) throws Exception {
        Main a=new Main();
        //读取A.cpp文件
        File file1=new File("C:\\Users\\Huawei\\Desktop\\A.cpp");
        //读取B.cpp文件
        File file2=new File("C:\\Users\\Huawei\\Desktop\\B.cpp");
        FileReader filereader1=new FileReader(file1);
        BufferedReader reader1=new BufferedReader(filereader1);
        FileReader filereader2=new FileReader(file2);
        BufferedReader reader2=new BufferedReader(filereader2);
        //保存A.cpp所有行
        ArrayList<String> list1=new ArrayList<>();
        //保存B.cpp所有行
        ArrayList<String> list2=new ArrayList<>();
        String s="";
        while((s=reader1.readLine())!=null)
            list1.add(s);
        reader1.close();
        while((s=reader2.readLine())!=null)
            list2.add(s);
        reader2.close();
        int m=list1.size();
        int n=list2.size();
        double[][] S=new double[m][n];
        int[][] D=new int[m][n];
        double r=0.88;
        System.out.println("---------------");
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                S[i][j]=a.getLCSlength(list1,list2,i,j,false);
                D[i][j]=S[i][j]>r?1:0;
            }
        }
        a.prinf(S,D,m,n,false);
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                S[i][j]=a.getLCSlength(list1,list2,i,j,true);
                D[i][j]=S[i][j]>r?1:0;
            }
        }
        a.prinf(S,D,m,n,true);

    }
}